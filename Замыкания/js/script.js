
// Замыкания - это следствие работы функции в Java Script(основной вывод В САМОМ НИЗУ)


// замыкание очень чётко можно показать на примере СЧЁТЧИКА(код ниже):
function t1() {
	let a = 0; // если переменная глобальная(вне функции) она не защищена и её могут перезаписать, поэтому мы эту переменную вместе с функцией оборачиваем ещё в одну функцию например t1 а функцию one просто убираем и вместо неё возвращаем ананимную функцию( код ниже):
	function one() {
		a += 1;
		return a;
	}
}
// если вызвать функцию несколько раз подряд мы получим СЧЁТЧИК(это без функции t1, но переменная 'let а' в таком случае не защищена)
// console.log(one()); // 1
// console.log(one()); // 2
// console.log(one()); // 3
// console.log(one()); // 4
// console.log(one()); // 5
// console.log(one()); // 6
// console.log(one()); // 7
// console.log(one()); // 8 и т.д.


// промежуточный Вывод: если нам нужны переменные в которые никто не должен влазить мы ДЕЛАЕМ ЗАМЫКАНИЕ: создаём переменные внутри функции и обращаемся к ним вернув новую функцию внутри этой же функции(она будет создавать область видимости), а затем создаем переменные вне этих функций и присвоиваим им основную функцию, стольок раз сколько нужно таким образом создавая новые области видимости

function t1() {
	let a = 0; 
	return function () { //ЭТА ФУНКЦИЯ СОЗДАЁТ ОПРЕДЕЛЁННУЮ ОБЛАСТЬ ВИДИМОСТИ
		a += 1;
		return a;
	}
}
let b = t1(); // здесь одна область видимости
let c = t1(); // здесь другая область видимости и т.д.

console.log(b());
console.log(b());
a = 5; // допустим если вдруг кто-то каким-то образом захочет перезаписать значение переменной это не сломает код и не перепишет значение переменной 
console.log(b());

console.log(c());
console.log(c());
console.log(c());


// ПО СУТИ ПОЛУЧАЕМ ВОЗМОЖНОСТЬ ДЕЛАТЬ ПЕРЕМЕННЫЕ КОТОРЫЕ НЕ ДОСТУПНЫ НИКОМУ КРОМЕ НАШИХ ФУНКЦИЙ КОТОРЫЕ СОЗДАЮТ ОПРЕДЕЛЁННУЮ ОБЛАСТЬ ВИДИМОСТИ - ЭТО И ЕСТЬ СВОЕГО РОДА ЗАМЫКАНИЯ!!!!!!!!